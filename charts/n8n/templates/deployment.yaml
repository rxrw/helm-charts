apiVersion: apps/v1
kind: Deployment
metadata:
  name: n8n
  namespace: {{ .Values.namespace }}
  labels:
    app: n8n
spec:
  replicas: 1
  selector:
    matchLabels:
      app: n8n
  template:
    metadata:
      labels:
        app: n8n
    spec:
      securityContext:
        fsGroup: {{ .Values.pgid }}
      containers:
        - name: n8n
          image: {{ .Values.images.n8n }}
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: {{ .Values.ports.n8n }}
          env:
            - name: TZ
              value: "{{ .Values.n8n.timezone }}"
            - name: PUID
              value: "{{ .Values.puid }}"
            - name: PGID
              value: "{{ .Values.pgid }}"
            - name: N8N_MODE
              value: "main"
            - name: N8N_BASIC_AUTH_ACTIVE
              value: "true"
            - name: N8N_BASIC_AUTH_USER
              value: "admin"
            - name: N8N_BASIC_AUTH_PASSWORD
              value: "admin"
            - name: N8N_HOST
              value: "{{ .Values.gateway.hosts.n8n }}"
            - name: N8N_PORT
              value: "{{ .Values.ports.n8n }}"
            - name: N8N_PROTOCOL
              value: "https"
            - name: N8N_WEBHOOK_URL
              value: "{{ .Values.n8n.webhookUrl }}"
            - name: N8N_EDITOR_BASE_URL
              value: "{{ .Values.n8n.editorBaseUrl }}"
            - name: DB_TYPE
              value: "postgresdb"
            - name: DB_POSTGRESDB_HOST
              value: "{{ .Values.postgresql.host }}"
            - name: DB_POSTGRESDB_PORT
              value: "{{ .Values.postgresql.port }}"
            - name: DB_POSTGRESDB_DATABASE
              value: "{{ .Values.postgresql.database }}"
            - name: DB_POSTGRESDB_USER
              value: "{{ .Values.postgresql.username }}"
            - name: DB_POSTGRESDB_PASSWORD
              value: "{{ .Values.postgresql.password }}"
            - name: N8N_METRICS
              value: "{{ .Values.n8n.metrics }}"
            - name: N8N_LOG_LEVEL
              value: "{{ .Values.n8n.logLevel }}"
            - name: N8N_DEFAULT_BINARY_DATA_MODE
              value: "{{ .Values.n8n.binaryDataMode }}"
            - name: N8N_BINARY_DATA_TTL
              value: "{{ .Values.n8n.binaryDataTtl }}"
            - name: N8N_BINARY_DATA_MAX_SIZE
              value: "{{ .Values.n8n.binaryDataMaxSize }}"
            - name: N8N_ENCRYPTION_KEY
              value: "{{ .Values.n8n.encryptionKey }}"
            - name: EXTERNAL_HOOK_FILES
              value: "/home/node/.n8n/hooks.js"
            - name: N8N_FORWARD_AUTH_HEADER
              value: "X-Auth-Request-Email"
{{- if .Values.queue.enabled }}
            - name: QUEUE_BULL_REDIS_HOST
              value: "{{ .Values.queue.redis.host }}"
            - name: QUEUE_BULL_REDIS_PORT
              value: "{{ .Values.queue.redis.port }}"
{{- if .Values.queue.redis.password }}
            - name: QUEUE_BULL_REDIS_PASSWORD
              value: "{{ .Values.queue.redis.password }}"
{{- end }}
{{- end }}
          volumeMounts:
            - name: n8n-data
              mountPath: /home/node/.n8n
            - name: n8n-hooks
              mountPath: /home/node/.n8n/hooks.js
              subPath: hooks.js
          livenessProbe:
            httpGet:
              path: /healthz
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /healthz
              port: http
            initialDelaySeconds: 10
            periodSeconds: 5
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      volumes:
        - name: n8n-data
          persistentVolumeClaim:
            claimName: n8n-data
        - name: n8n-hooks
          configMap:
            name: n8n-hooks
